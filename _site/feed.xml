<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>A technical blog by Madan Thangavelu</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 23 May 2020 09:54:59 -0700</pubDate>
    <lastBuildDate>Sat, 23 May 2020 09:54:59 -0700</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>An opnionated REST URL design</title>
        <description>&lt;p&gt;This is a sample&lt;/p&gt;

</description>
        <pubDate>Fri, 22 May 2020 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/software/2020/05/22/opinionated-rest-url-design.html</link>
        <guid isPermaLink="true">http://localhost:4000/software/2020/05/22/opinionated-rest-url-design.html</guid>
        
        
        <category>Software</category>
        
      </item>
    
      <item>
        <title>REST is not a standard</title>
        <description>&lt;p&gt;Around 2000 the internet was largely composed of static websites. We were comfortable going to foobar.com and happy receiving HTML content back which the browser would then render. We would then click on a link of submit a button and another page would be hurled back at us. This back and forth pingpong was largely how the World Wide Web was pieced together.  In former times, large desktop computers were the primary single medium of accessing these websites. These were indeed happy and simple times, however, not as exciting and chaotic as today - just 20 years later.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;URL is not the best
In the test&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-need-for-standardiztion&quot;&gt;The need for Standardiztion&lt;/h2&gt;

&lt;p&gt;To understand why we currently live in a spaghetti world of web technologies, it would be prudent to view the evolution across a few dimensions.&lt;/p&gt;

&lt;!--excerpt_separator--&gt;

&lt;h5 id=&quot;medium-of-access&quot;&gt;Medium of access&lt;/h5&gt;

&lt;p&gt;The data from the server was only accessed by a bulky desktop. The million dollar weather app business had to develop a single web page to cater its customers. Contrast that with a VC funded sillicon valley company with a brilliant weather app idea. The first version must work seamlessly on a native IOs app, native android App, native desktop application, native laptop application, IoT device by your bedside that runs on an iPad mod and oh, finally all the different web browsers. Here is the kicker! All devices must be in sync with the cities I configured the weather for.&lt;/p&gt;

&lt;p&gt;I love getting the weather notifications across 5 devices a few seconds apart!&lt;/p&gt;

&lt;h5 id=&quot;attention-span&quot;&gt;Attention Span&lt;/h5&gt;

&lt;p&gt;In order to keep the user engaged in 2020, you have to keep changing the content on the page they are viewing. If it is not dynamic the content will feel outdated. This necessitates the need to fetch more data from the browser as the user continues to stare at the device/app of choice.&lt;/p&gt;

&lt;h5 id=&quot;technology-standardization&quot;&gt;Technology Standardization&lt;/h5&gt;

&lt;p&gt;In late 1990s we saw browser wars where their capabilities allowed innovation but left us with a largely broken ecosystem - a feature would work in internet explorer but not on netscape. Standardization bodies like the IETF, W3C and the now ceased The Web Standards Project did standardize the aspects of the infrastructure powering the internet - html, javascript, protocol like HTTP, WebRTC etc, but there was never success in standardizing the “application layer”. This of “application layer” as the “what” and the technology standardizations as the “how”.&lt;/p&gt;

&lt;p&gt;What you speak (actual applications you build)
Grammar with allowed variations (REST)
Words (application protocols HTTP, HTTP2, )
Letters (network protocol)&lt;/p&gt;

&lt;p&gt;To solve the attention span, the medium of access -  XMLHttpRequest (XHR) in browsers in the mid 2000’s was a huge win for the Web Platform. This allowed a browser to speak multiple requests to the server and fetch the information they need without reloading the entire view. This gave birth to APIs.  APIs became the contract between the backend and the frontend systems to “transfer state”.&lt;/p&gt;

&lt;h2 id=&quot;rest-was-born&quot;&gt;REST was born&lt;/h2&gt;

&lt;p&gt;In 2000 Roy fielding proposed “Representational State Transfer” as a principled approach to transfer state from the backend to the frontend. As with all proposals, a good number of it was followed, along the way, we discovered and modified things as required.&lt;/p&gt;

&lt;p&gt;REST was originally a guidance, the foundational pieces were concrete but the final implementation was open ended. As an analogy, REST provides us parts and components and some suggestions, but nothing stops us from reinventing the wheel - literally. Imagine we provide the following proposal, a car has a steering wheel which should control the wheels. There should be three or four wheels. There should be three pedals controlling clutch, gear and the brakes. One can imagine how many types of cars would be innovated which fit the proposal. REST has evolved in somewhat in that direction. The basic constructs of URL, Query params, post params, HTTP Method, Some standard headers are available, but when the rubber hits the road (keeping the car analogy), every API is a snowflake. Knowing one company’s API does not automatically translate to using another company’s API.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 May 2020 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/software/2020/05/20/REST-is-not-a-standard.html</link>
        <guid isPermaLink="true">http://localhost:4000/software/2020/05/20/REST-is-not-a-standard.html</guid>
        
        
        <category>Software</category>
        
      </item>
    
      <item>
        <title>Self-hosted password manager</title>
        <description>&lt;p&gt;The most reused password used in the world is 123456. There are only a few different options when it comes to choosing your password and remembering them. We will walk through a few options for creating and storing your password. Finally, I will introduce a web based password manager that I created over a weekend as a fun project. It can be self hosted for free while providing the best parts of all the available options to store and secure your passwords.&lt;/p&gt;

&lt;!--excerpt_separator--&gt;

&lt;h2 id=&quot;create-passwords-and-memorize&quot;&gt;Create passwords and memorize&lt;/h2&gt;

&lt;p&gt;Humans reuse the same password and sometimes relatively simple ones. Those who are sensitive about security innovate on their password patterns. If you have a good memory, this is an option, not the best though. Attackers can extract patterns if they have access to a few of your passwords.&lt;/p&gt;

&lt;h2 id=&quot;use-single-identity-providers&quot;&gt;Use single identity providers&lt;/h2&gt;

&lt;p&gt;Single identity provider systems like &lt;a href=&quot;http://openid.net/what-is-openid/&quot;&gt;openId&lt;/a&gt; should have been the norm as it provides a great way to keep your identity secure while getting access to large number of website. The adoption of this technology did not unfold the way it was envisioned. The failure can be attributed to two reasons. The need for a single company providing the identity, e.g., openId, facebookConnect. The other reason is that smaller websites would be least bothered to spend the effort to integrate with these systems which are fairly more involved that just storing salted encrypted passwords in the database.&lt;/p&gt;

&lt;h2 id=&quot;master-password-with-hosted-service&quot;&gt;Master password with hosted service&lt;/h2&gt;

&lt;p&gt;There are a number of companies that provide hosted and self-hosted options to secure all your passwords behind a master password. This is by far the most widely adopted option for the average security conscious person. Companies like lastpass, 1password provide this option. The only issue is that it provides the attacker a single large pot of gold. With chrome extensions provided by these companies, it could result in &lt;a href=&quot;https://blog.lastpass.com/2017/03/security-update-for-the-lastpass-extension.html/&quot;&gt;security vulnerabilities&lt;/a&gt;. It is well known that your data is as secure as your weakest link.&lt;/p&gt;

&lt;p&gt;Those who are uncomfortable with hosted solutions, can opt for self-hosted solutions. For individuals it can be expensive for no clear ROI.&lt;/p&gt;

&lt;p&gt;One of the free option to store your own password vault is using keepassX&lt;a href=&quot;http://www.keepassx.org/&quot;&gt;2&lt;/a&gt;. It is a great software that has good support across all platforms, both mobile and desktop. The main issue of this system is synchronization of passwords file. I have had situations where the file got corrupted while synchronizing it using dropbox.&lt;/p&gt;

&lt;h2 id=&quot;best-of-all-options&quot;&gt;Best of all options&lt;/h2&gt;

&lt;p&gt;None of the above options seem perfect. The ideal system should have the best features of all those systems. It should be free, should not be the single stop pot of gold for hackers and should not lock us into a single provider (like openID).&lt;/p&gt;

&lt;p&gt;This led me to create my own &lt;a href=&quot;https://github.com/HackingHabits/PersonalPasswordManager&quot;&gt;password manager&lt;/a&gt; that can be self hosted on any free providers like heroku or google app engine. This provides the necessary flexibility of having a web based service that is secure and free, that almost no one but you would know even exists.&lt;/p&gt;

&lt;p&gt;The implementation has a UI that encrypts the password using your master password and &lt;a href=&quot;https://bitwiseshiftleft.github.io/sjcl/&quot;&gt;Stanford Javascript Crypto Library&lt;/a&gt;. The backend is a python &lt;a href=&quot;http://flask.pocoo.org/&quot;&gt;Flask&lt;/a&gt; application that receives an already encrypted password via https and just stores it in the backend in a blob store. Here is the UI of the application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2012-10-09-self-hosted-password-manager/password-manager.png&quot; alt=&quot;self hosted password manager&quot; width=&quot;336px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I did not spend time optimizing the specific crypto technique as I was more focused on getting the application to work end to end over the weekend. I am sure there will be opportunities to improve on the specific crypto options.&lt;/p&gt;

&lt;p&gt;In order to lookup/store passwords:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;you must be logged in into your google account.&lt;/li&gt;
  &lt;li&gt;you must also know your mater password.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have been fairly happy with the functionality is has been providing me with the layers of security. You can optionally configure it such that you would not need your google account to be logged in.&lt;/p&gt;

&lt;h2 id=&quot;guide-to-have-one-of-your-own-hosted-password-manager&quot;&gt;Guide to have one of your own hosted password manager&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/HackingHabits/PersonalPasswordManager&quot;&gt;Github Source&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/hackinghabits/personal-passwordmanager-installation-14646084&quot;&gt;Slideshare – Installation guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/hackinghabits/password-manager-howtoguide&quot;&gt;Slideshare – How to guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 09 Oct 2012 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/software/2012/10/09/self-hosted-password-manager.html</link>
        <guid isPermaLink="true">http://localhost:4000/software/2012/10/09/self-hosted-password-manager.html</guid>
        
        
        <category>Software</category>
        
      </item>
    
  </channel>
</rss>
